clearvars; clc; close all; set(0,'DefaultFigureWindowStyle','docked');
year2sec= 31556952;
prop_names = {'FEEP', 'Hall Thruster', 'Electrospray'};
Isps = [3000; 1200; 800]*9.81e-3; %decent EP, km/s
Fs = [.35; 16; 0.03]*1e-6; %kg*km/s2 = N/1000
Fangle = deg2rad(0:10:90);
F_dt = year2sec*(0.5:0.5:5); %sec
m_struct = [1; 25; 1]; %kg
aEarth = 149.60e6; %km
mu_sun = 1.32712440018e11; %km3/s2
n = sqrt(mu_sun/aEarth^3); %rad/sec
mu_mars = 4.282837e4; %km3/s2

oe0 = [aEarth; 0; 0; 0; 0; 0]; %start at Earth circular orbit (parabolic departure from Earth)

v_arrs = zeros(length(prop_names),length(F_dt),length(Fangle));
dts = zeros(length(prop_names),length(F_dt),length(Fangle));
errs = zeros(length(prop_names),length(F_dt),length(Fangle));
datas = cell(length(prop_names),length(Fangle));
for k = 1:length(prop_names)
    for j = 1:length(Fangle)
        [dt,v_arr,errors,data] = run_trial(oe0,Fs(k)*[sin(Fangle(j));cos(Fangle(j));0],F_dt,m_struct(k),Isps(k));
        v_arrs(k,:,j) = v_arr;
        dts(k,:,j) = dt;
        errs(k,:,j) = errors;
        datas{k,j} = data;
    end
end
dts = dts/86400;
F_dt = F_dt/86400;
%% Plotting
for i = 1:length(prop_names)
    [DT,FA] = meshgrid(F_dt,Fangle);
    dtp = squeeze(dts(i,:,:));
    v_arrp = squeeze(v_arrs(i,:,:));
    errp = squeeze(errs(i,:,:));
    figure('Name',[prop_names{i} ' ' 'TOF']); hold on;
    h1 = surf(DT,rad2deg(FA),dtp.');
    xlabel('Time of Powered Flight, days'); ylabel('Angle, deg');
    title('Time-of-Flight to Mars, days'); colorbar;
    set(gca,'color','k');
    figure('Name',[prop_names{i} ' ' 'V Arr']); hold on; 
    h2 = surf(DT,rad2deg(FA),v_arrp.');
    xlabel('Time of Powered Flight, days'); ylabel('Angle, deg');
    title('Arrival Velocity Relative to Mars, km/s'); colorbar;
    set(gca,'color','k');
    figure('Name',[prop_names{i} ' ' 'Errors']); hold on; 
    h3 = surf(DT,rad2deg(FA),errp.');
    xlabel('Time of Powered Flight, days'); ylabel('Angle, deg');
    title('Error Codes'); colorbar;
    set(gca,'color','k');
    h1.ButtonDownFcn = @(hO,e) PlotMe(hO,e,datas,dts,prop_names,errs,mu_sun);
    h2.ButtonDownFcn = @(hO,e) PlotMe(hO,e,datas,dts,prop_names,errs,mu_sun);
    h3.ButtonDownFcn = @(hO,e) PlotMe(hO,e,datas,dts,prop_names,errs,mu_sun);
end

 function PlotMe(hObject,event,datas,dts,prop_names,errs,mu_sun)
    mousePos =event.IntersectionPoint;
    F_dt = hObject.XData;
    Y = hObject.YData;
	[~,i] = min(abs(mousePos(1)-F_dt(1,:)));
    [~,j] = min(abs(mousePos(2)-Y(:,1)));
    n = get(gcf,'Number');
    p = floor((n-1)/3)+1;
    oe_out = datas{p,j};
    oe_out = oe_out{i};
    r_eci = zeros(size(oe_out,1),3);
    for k = 1:length(oe_out)
       curr_rv = equi2rv(oe_out(k,:),mu_sun);
       r_eci(k,:) = curr_rv(1:3);
    end
    ax = gca;
    figure('Name',[prop_names{p} ' ' 'Trajectory']); hold on;
    title(strcat(ax.XLabel.String, ": ", num2str(F_dt(i)), " | ", ax.YLabel.String, ": ", num2str(Y(j))));
    xlabel('Heliocentric X (km)'); ylabel('Heliocentric Y (km)');
    aMars = 227939200; %km
    aEarth = 149.60e6; %km
    viscircles([0 0],aEarth,'Color','b','LineStyle','--','LineWidth',1);
    viscircles([0 0],aMars,'Color','r','LineStyle','--','LineWidth',1);
    tstep = dts(p,i,j)/size(r_eci,1);
    if errs(p,i,j) == 3
        plot(r_eci(:,1),r_eci(:,2),'g','DisplayName','Continuous Thrust');
    elseif errs(p,i,j) ~= 2
        cuti = floor(F_dt(i)/tstep);
        plot(r_eci(1:cuti,1),r_eci(1:cuti,2),'g','DisplayName','Continuous Thrust');
        plot(r_eci(cuti:end,1),r_eci(cuti:end,2),'k','DisplayName','Ballistic');
    else
        text(0,0,"Simulation Timeout ERROR");
        plot(r_eci(:,1),r_eci(:,2),'g','DisplayName','Trajectory');
    end
    legend; axis equal;
 end
